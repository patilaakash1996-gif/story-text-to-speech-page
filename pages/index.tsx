import { useState, useEffect, type FC } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { Play, Pause, Square, Volume2, Languages, Zap, ChevronsRight, LoaderCircle } from 'lucide-react';

// This helper component is fine
const ControlSlider: FC<{ id: string; label: string; value: number; min: number; max: number; step: number; onChange: (e: React.ChangeEvent<HTMLInputElement>) => void; icon: React.ReactNode; }> = ({ id, label, value, min, max, step, onChange, icon }) => (
    <div className="space-y-2">
        <label htmlFor={id} className="flex items-center gap-2 text-sm font-medium text-slate-600">
            {icon} {label} <span className="font-bold text-slate-800">{value.toFixed(1)}</span>
        </label>
        <input id={id} type="range" min={min} max={max} step={step} value={value} onChange={onChange} className="w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer accent-blue-600" />
    </div>
);

const StoryTextToSpeechPage: NextPage = () => {
    const initialStory = `This is the stable, working version of the application. The voice is now generated by your browser. While it may not sound as perfect as a premium AI voice, the application is now guaranteed to work reliably. You can now add your own text and hear it spoken.`;

    const [text, setText] = useState<string>(initialStory);
    const [isSpeaking, setIsSpeaking] = useState<boolean>(false);
    const [isPaused, setIsPaused] = useState<boolean>(false);
    const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);
    const [selectedVoice, setSelectedVoice] = useState<SpeechSynthesisVoice | null>(null);
    const [rate, setRate] = useState<number>(1);
    const [pitch, setPitch] = useState<number>(1);
    
    // This state is the key to stability. It tracks when the browser's speech engine is ready.
    const [isSpeechReady, setIsSpeechReady] = useState<boolean>(false);

    useEffect(() => {
        const populateVoiceList = () => {
            const availableVoices = window.speechSynthesis.getVoices();
            if (availableVoices.length === 0) {
                // If voices are not ready, we simply wait for the 'voiceschanged' event.
                return;
            }
            
            setVoices(availableVoices);

            // Set a default voice only if one hasn't been chosen yet.
            if (!selectedVoice) {
                const hindiVoice = availableVoices.find(v => v.lang === 'hi-IN');
                const indianEnglishVoice = availableVoices.find(v => v.lang === 'en-IN');
                setSelectedVoice(hindiVoice || indianEnglishVoice || availableVoices[0]);
            }
            
            // Announce to the app that the speech engine is ready to use.
            setIsSpeechReady(true); 
        };

        // This event listener is the guaranteed way to know when voices are loaded.
        window.speechSynthesis.onvoiceschanged = populateVoiceList;
        // We also call it once, in case the voices are already cached by the browser.
        populateVoiceList();
        
        return () => { window.speechSynthesis.onvoiceschanged = null; };
    }, []); // This effect only runs once when the component mounts.

    const handleSpeak = () => {
        // This button will be disabled until isSpeechReady is true, preventing crashes.
        if (!isSpeechReady || !selectedVoice) return; 
        
        if (isPaused) {
            window.speechSynthesis.resume();
            setIsPaused(false);
            setIsSpeaking(true);
            return;
        }
        window.speechSynthesis.cancel(); // Clear any previous speech
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.voice = selectedVoice;
        utterance.rate = rate;
        utterance.pitch = pitch;
        utterance.onstart = () => { setIsSpeaking(true); setIsPaused(false); };
        utterance.onend = () => { setIsSpeaking(false); setIsPaused(false); };
        utterance.onerror = (event) => { console.error('SpeechSynthesisUtterance.onerror', event); setIsSpeaking(false); setIsPaused(false); };
        window.speechSynthesis.speak(utterance);
    };

    const handlePause = () => { window.speechSynthesis.pause(); setIsPaused(true); setIsSpeaking(false); };
    const handleStop = () => { window.speechSynthesis.cancel(); setIsSpeaking(false); setIsPaused(false); };

    return (
        <>
            <Head>
                <title>Story Text-to-Speech | Stable Version</title>
                <meta name="description" content="A stable, working text-to-speech application." />
                <link rel="icon" href="/favicon.ico" />
                <link rel="preconnect" href="https://fonts.googleapis.com" />
                <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
                <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet" />
            </Head>
            
            <div className="min-h-screen bg-slate-50 font-sans flex flex-col">
                <main className="flex-grow flex items-center justify-center p-4">
                    <div className="w-full max-w-4xl mx-auto bg-white rounded-2xl shadow-lg border border-slate-200 p-6 md:p-8">
                        <div className="flex items-center gap-4 mb-6">
                            <div className="bg-blue-100 text-blue-600 p-3 rounded-xl"><Volume2 size={24} /></div>
                            <div>
                                <h1 className="text-2xl font-bold text-slate-800">Story Text-to-Speech</h1>
                                <p className="text-slate-500">Bring your Hindi & English stories to life.</p>
                            </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <div className="space-y-2">
                                <label htmlFor="story-text" className="text-sm font-medium text-slate-700">Your Story</label>
                                <textarea id="story-text" value={text} onChange={(e) => setText(e.target.value)} placeholder="Enter your story here..." className="w-full h-[350px] p-4 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 transition-shadow duration-200 resize-none text-slate-700 leading-relaxed bg-white" />
                            </div>
                            <div className="space-y-6 flex flex-col">
                                <div className="space-y-6">
                                    <div>
                                        <label htmlFor="voice-select" className="flex items-center gap-2 mb-2 text-sm font-medium text-slate-700"><Languages size={16} /> Voice / Language</label>
                                        <select id="voice-select" value={selectedVoice?.name || ''} onChange={(e) => { const voice = voices.find(v => v.name === e.target.value); setSelectedVoice(voice || null); }} className="w-full p-3 border border-slate-300 rounded-xl bg-white focus:ring-2 focus:ring-blue-500 transition-shadow duration-200" disabled={!isSpeechReady}>
                                            {isSpeechReady ? voices.map(voice => (<option key={voice.name} value={voice.name}>{voice.name} ({voice.lang})</option>)) : <option>Loading voices...</option>}
                                        </select>
                                    </div>
                                    <div className="space-y-4">
                                        <ControlSlider id="rate" label="Speed" value={rate} min={0.5} max={2} step={0.1} onChange={(e) => setRate(parseFloat(e.target.value))} icon={<ChevronsRight size={16} />} />
                                        <ControlSlider id="pitch" label="Pitch" value={pitch} min={0} max={2} step={0.1} onChange={(e) => setPitch(parseFloat(e.target.value))} icon={<Zap size={16} />} />
                                    </div>
                                </div>
                                <div className="pt-6 border-t border-slate-200 mt-auto">
                                    {!isSpeechReady && (<div className="flex items-center justify-center gap-2 p-3 text-slate-500"><LoaderCircle className="animate-spin" size={18} /> <span>Initializing Audio...</span></div>)}
                                    <div className={`space-y-3 ${!isSpeechReady ? 'opacity-50 cursor-not-allowed' : ''}`}>
                                        <div className="flex items-center gap-3">
                                            <button onClick={handleSpeak} disabled={!isSpeechReady || isSpeaking} className="flex-grow flex items-center justify-center gap-2 p-3 bg-blue-600 text-white font-semibold rounded-xl hover:bg-blue-700 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 disabled:bg-blue-300 disabled:cursor-not-allowed disabled:shadow-none disabled:transform-none">
                                                {isPaused ? <><Play size={18} /> Resume</> : <><Play size={18} /> Speak</>}
                                            </button>
                                            <button onClick={handlePause} disabled={!isSpeechReady || !isSpeaking || isPaused} className="flex-shrink-0 flex items-center justify-center h-[48px] w-[48px] bg-slate-200 text-slate-700 font-semibold rounded-xl hover:bg-slate-300 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 disabled:bg-slate-100 disabled:text-slate-400 disabled:cursor-not-allowed disabled:shadow-none disabled:transform-none">
                                                <Pause size={18} />
                                            </button>
                                        </div>
                                        <button onClick={handleStop} disabled={!isSpeechReady || (!isSpeaking && !isPaused)} className="w-full flex items-center justify-center gap-2 p-3 bg-red-600 text-white font-semibold rounded-xl hover:bg-red-700 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 disabled:bg-red-300 disabled:cursor-not-allowed disabled:shadow-none disabled:transform-none">
                                            <Square size={18} /> Stop
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </>
    );
};

export default StoryTextToSpeechPage;
